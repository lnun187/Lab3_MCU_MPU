
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af0  08002af0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002af0  08002af0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af0  08002af0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000020  08002b18  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002b18  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000964b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c36  00000000  00000000  00029694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fef  00000000  00000000  0002c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c28f  00000000  00000000  000436b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082444  00000000  00000000  0004f946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  000d1de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab4 	.word	0x08002ab4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002ab4 	.word	0x08002ab4

0800014c <testLed>:
 */
#ifndef SRC_BLINKYLED_C_
#define SRC_BLINKYLED_C_

#include "blinkyLed.h"
void testLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin ( blinkyLed_GPIO_Port , blinkyLed_Pin );
 8000150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <testLed+0x14>)
 8000156:	f001 fcb0 	bl	8001aba <HAL_GPIO_TogglePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <buttonReading>:
int count;
GPIO_TypeDef *port[N0_OF_BUTTONS] = { butt1_GPIO_Port, butt2_GPIO_Port,
butt3_GPIO_Port };
uint16_t pin[N0_OF_BUTTONS] = { butt1_Pin, butt2_Pin, butt3_Pin };

void buttonReading() {
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	for (unsigned int i = 0; i < N0_OF_BUTTONS; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e041      	b.n	80001f4 <buttonReading+0x90>
		buttonBuffer[i] = HAL_GPIO_ReadPin(port[i], pin[i]);
 8000170:	4a24      	ldr	r2, [pc, #144]	; (8000204 <buttonReading+0xa0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	4923      	ldr	r1, [pc, #140]	; (8000208 <buttonReading+0xa4>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	4619      	mov	r1, r3
 8000182:	4610      	mov	r0, r2
 8000184:	f001 fc6a 	bl	8001a5c <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	4619      	mov	r1, r3
 800018c:	4a1f      	ldr	r2, [pc, #124]	; (800020c <buttonReading+0xa8>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	460a      	mov	r2, r1
 8000194:	701a      	strb	r2, [r3, #0]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000196:	4a1d      	ldr	r2, [pc, #116]	; (800020c <buttonReading+0xa8>)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d11b      	bne.n	80001da <buttonReading+0x76>
			// if a button is pressed , we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80001a2:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <buttonReading+0xac>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001aa:	2b31      	cmp	r3, #49	; 0x31
 80001ac:	d80f      	bhi.n	80001ce <buttonReading+0x6a>
				counterForButtonPress1s[i]++;
 80001ae:	4a18      	ldr	r2, [pc, #96]	; (8000210 <buttonReading+0xac>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001b6:	3301      	adds	r3, #1
 80001b8:	b299      	uxth	r1, r3
 80001ba:	4a15      	ldr	r2, [pc, #84]	; (8000210 <buttonReading+0xac>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				setTimer(3, 500);
 80001c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001c6:	2003      	movs	r0, #3
 80001c8:	f001 f81c 	bl	8001204 <setTimer>
 80001cc:	e00f      	b.n	80001ee <buttonReading+0x8a>
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <buttonReading+0xb0>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4413      	add	r3, r2
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
 80001d8:	e009      	b.n	80001ee <buttonReading+0x8a>
				// todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 80001da:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <buttonReading+0xac>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2100      	movs	r1, #0
 80001e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80001e4:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <buttonReading+0xb0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
	for (unsigned int i = 0; i < N0_OF_BUTTONS; i++) {
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d9ba      	bls.n	8000170 <buttonReading+0xc>
		}
	}
}
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000000 	.word	0x20000000
 8000208:	2000000c 	.word	0x2000000c
 800020c:	20000060 	.word	0x20000060
 8000210:	20000058 	.word	0x20000058
 8000214:	20000064 	.word	0x20000064

08000218 <isButtonPressed>:
int isButtonPressed(unsigned int index) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b02      	cmp	r3, #2
 8000224:	d901      	bls.n	800022a <isButtonPressed+0x12>
		return 0;
 8000226:	2300      	movs	r3, #0
 8000228:	e00e      	b.n	8000248 <isButtonPressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED && counterForButtonPress1s[index] < 30);
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <isButtonPressed+0x3c>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d107      	bne.n	8000246 <isButtonPressed+0x2e>
 8000236:	4a08      	ldr	r2, [pc, #32]	; (8000258 <isButtonPressed+0x40>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	2b1d      	cmp	r3, #29
 8000240:	d801      	bhi.n	8000246 <isButtonPressed+0x2e>
 8000242:	2301      	movs	r3, #1
 8000244:	e000      	b.n	8000248 <isButtonPressed+0x30>
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000060 	.word	0x20000060
 8000258:	20000058 	.word	0x20000058

0800025c <isButtonPressed1s>:
int isButtonPressed1s(unsigned int index) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d901      	bls.n	800026e <isButtonPressed1s+0x12>
		return 0;
 800026a:	2300      	movs	r3, #0
 800026c:	e013      	b.n	8000296 <isButtonPressed1s+0x3a>
	if(isTimerExpired(3) && flagForButtonPress1s[index] == 1) {
 800026e:	2003      	movs	r0, #3
 8000270:	f001 f818 	bl	80012a4 <isTimerExpired>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d00c      	beq.n	8000294 <isButtonPressed1s+0x38>
 800027a:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <isButtonPressed1s+0x44>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d106      	bne.n	8000294 <isButtonPressed1s+0x38>
		setTimer(3, 500);
 8000286:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800028a:	2003      	movs	r0, #3
 800028c:	f000 ffba 	bl	8001204 <setTimer>
		return 1;
 8000290:	2301      	movs	r3, #1
 8000292:	e000      	b.n	8000296 <isButtonPressed1s+0x3a>
	}
	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000064 	.word	0x20000064

080002a4 <initAutomatic>:

int stateA;
int stateB;
int countA;
int countB;
void initAutomatic() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	timeGreen = 12;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <initAutomatic+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	601a      	str	r2, [r3, #0]
	timeAmber = 5;
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <initAutomatic+0x50>)
 80002b0:	2205      	movs	r2, #5
 80002b2:	601a      	str	r2, [r3, #0]
	timeRed = 23;
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <initAutomatic+0x54>)
 80002b6:	2217      	movs	r2, #23
 80002b8:	601a      	str	r2, [r3, #0]
	stateA = RED;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <initAutomatic+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
	countA = timeRed;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <initAutomatic+0x54>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <initAutomatic+0x5c>)
 80002c6:	6013      	str	r3, [r2, #0]
	stateB = GREEN;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <initAutomatic+0x60>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	601a      	str	r2, [r3, #0]
	countB = timeGreen;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <initAutomatic+0x4c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <initAutomatic+0x64>)
 80002d4:	6013      	str	r3, [r2, #0]
	setTimer(0, 1000);
 80002d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 ff92 	bl	8001204 <setTimer>
	setTimer(1, 1000);
 80002e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 ff8d 	bl	8001204 <setTimer>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000040 	.word	0x20000040
 80002f4:	20000048 	.word	0x20000048
 80002f8:	2000004c 	.word	0x2000004c
 80002fc:	20000078 	.word	0x20000078
 8000300:	20000074 	.word	0x20000074
 8000304:	20000070 	.word	0x20000070
 8000308:	2000006c 	.word	0x2000006c

0800030c <afterModify>:
void afterModify(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	stateA = RED;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <afterModify+0x38>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	countA = timeRed;
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <afterModify+0x3c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <afterModify+0x40>)
 800031c:	6013      	str	r3, [r2, #0]
	stateB = GREEN;
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <afterModify+0x44>)
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
	countB = timeGreen;
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <afterModify+0x48>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <afterModify+0x4c>)
 800032a:	6013      	str	r3, [r2, #0]
	setTimer(0, 1000);
 800032c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000330:	2000      	movs	r0, #0
 8000332:	f000 ff67 	bl	8001204 <setTimer>
	setTimer(1, 1000);
 8000336:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800033a:	2001      	movs	r0, #1
 800033c:	f000 ff62 	bl	8001204 <setTimer>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000078 	.word	0x20000078
 8000348:	2000004c 	.word	0x2000004c
 800034c:	20000074 	.word	0x20000074
 8000350:	20000070 	.word	0x20000070
 8000354:	20000040 	.word	0x20000040
 8000358:	2000006c 	.word	0x2000006c

0800035c <automaticRun>:
void automaticRun() {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch (stateA) {
 8000360:	4b7a      	ldr	r3, [pc, #488]	; (800054c <automaticRun+0x1f0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b02      	cmp	r3, #2
 8000366:	d023      	beq.n	80003b0 <automaticRun+0x54>
 8000368:	2b02      	cmp	r3, #2
 800036a:	dc5d      	bgt.n	8000428 <automaticRun+0xcc>
 800036c:	2b00      	cmp	r3, #0
 800036e:	d03d      	beq.n	80003ec <automaticRun+0x90>
 8000370:	2b01      	cmp	r3, #1
 8000372:	d159      	bne.n	8000428 <automaticRun+0xcc>
		case GREEN:
				greenA();
 8000374:	f000 fcb0 	bl	8000cd8 <greenA>
				if(isTimerExpired(0)){
 8000378:	2000      	movs	r0, #0
 800037a:	f000 ff93 	bl	80012a4 <isTimerExpired>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d009      	beq.n	8000398 <automaticRun+0x3c>
					setTimer(0, 1000);
 8000384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000388:	2000      	movs	r0, #0
 800038a:	f000 ff3b 	bl	8001204 <setTimer>
					countA--;
 800038e:	4b70      	ldr	r3, [pc, #448]	; (8000550 <automaticRun+0x1f4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a6e      	ldr	r2, [pc, #440]	; (8000550 <automaticRun+0x1f4>)
 8000396:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 8000398:	4b6d      	ldr	r3, [pc, #436]	; (8000550 <automaticRun+0x1f4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	dc50      	bgt.n	8000442 <automaticRun+0xe6>
					countA = timeAmber;
 80003a0:	4b6c      	ldr	r3, [pc, #432]	; (8000554 <automaticRun+0x1f8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a6a      	ldr	r2, [pc, #424]	; (8000550 <automaticRun+0x1f4>)
 80003a6:	6013      	str	r3, [r2, #0]
					stateA = AMBER;
 80003a8:	4b68      	ldr	r3, [pc, #416]	; (800054c <automaticRun+0x1f0>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	601a      	str	r2, [r3, #0]
				}
			break;
 80003ae:	e048      	b.n	8000442 <automaticRun+0xe6>
		case AMBER:
				amberA();
 80003b0:	f000 fcaa 	bl	8000d08 <amberA>
				if(isTimerExpired(0)){
 80003b4:	2000      	movs	r0, #0
 80003b6:	f000 ff75 	bl	80012a4 <isTimerExpired>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d009      	beq.n	80003d4 <automaticRun+0x78>
					setTimer(0, 1000);
 80003c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 ff1d 	bl	8001204 <setTimer>
					countA--;
 80003ca:	4b61      	ldr	r3, [pc, #388]	; (8000550 <automaticRun+0x1f4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a5f      	ldr	r2, [pc, #380]	; (8000550 <automaticRun+0x1f4>)
 80003d2:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 80003d4:	4b5e      	ldr	r3, [pc, #376]	; (8000550 <automaticRun+0x1f4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dc34      	bgt.n	8000446 <automaticRun+0xea>
					countA = timeRed;
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <automaticRun+0x1fc>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a5b      	ldr	r2, [pc, #364]	; (8000550 <automaticRun+0x1f4>)
 80003e2:	6013      	str	r3, [r2, #0]
					stateA = RED;
 80003e4:	4b59      	ldr	r3, [pc, #356]	; (800054c <automaticRun+0x1f0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
				}
			break;
 80003ea:	e02c      	b.n	8000446 <automaticRun+0xea>
		case RED:
				redA();
 80003ec:	f000 fca4 	bl	8000d38 <redA>
				if(isTimerExpired(0)){
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 ff57 	bl	80012a4 <isTimerExpired>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d009      	beq.n	8000410 <automaticRun+0xb4>
					setTimer(0, 1000);
 80003fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000400:	2000      	movs	r0, #0
 8000402:	f000 feff 	bl	8001204 <setTimer>
					countA--;
 8000406:	4b52      	ldr	r3, [pc, #328]	; (8000550 <automaticRun+0x1f4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a50      	ldr	r2, [pc, #320]	; (8000550 <automaticRun+0x1f4>)
 800040e:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 8000410:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <automaticRun+0x1f4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	dc18      	bgt.n	800044a <automaticRun+0xee>
					countA = timeGreen;
 8000418:	4b50      	ldr	r3, [pc, #320]	; (800055c <automaticRun+0x200>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a4c      	ldr	r2, [pc, #304]	; (8000550 <automaticRun+0x1f4>)
 800041e:	6013      	str	r3, [r2, #0]
					stateA = GREEN;
 8000420:	4b4a      	ldr	r3, [pc, #296]	; (800054c <automaticRun+0x1f0>)
 8000422:	2201      	movs	r2, #1
 8000424:	601a      	str	r2, [r3, #0]
				}
			break;
 8000426:	e010      	b.n	800044a <automaticRun+0xee>
		default:
			stateA = RED;
 8000428:	4b48      	ldr	r3, [pc, #288]	; (800054c <automaticRun+0x1f0>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
			countA = timeRed;
 800042e:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <automaticRun+0x1fc>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a47      	ldr	r2, [pc, #284]	; (8000550 <automaticRun+0x1f4>)
 8000434:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fee2 	bl	8001204 <setTimer>
			break;
 8000440:	e004      	b.n	800044c <automaticRun+0xf0>
			break;
 8000442:	bf00      	nop
 8000444:	e002      	b.n	800044c <automaticRun+0xf0>
			break;
 8000446:	bf00      	nop
 8000448:	e000      	b.n	800044c <automaticRun+0xf0>
			break;
 800044a:	bf00      	nop
	}
	switch (stateB) {
 800044c:	4b44      	ldr	r3, [pc, #272]	; (8000560 <automaticRun+0x204>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d023      	beq.n	800049c <automaticRun+0x140>
 8000454:	2b02      	cmp	r3, #2
 8000456:	dc5d      	bgt.n	8000514 <automaticRun+0x1b8>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d03d      	beq.n	80004d8 <automaticRun+0x17c>
 800045c:	2b01      	cmp	r3, #1
 800045e:	d159      	bne.n	8000514 <automaticRun+0x1b8>
		case GREEN:
				greenB();
 8000460:	f000 fc82 	bl	8000d68 <greenB>
				if(isTimerExpired(1)){
 8000464:	2001      	movs	r0, #1
 8000466:	f000 ff1d 	bl	80012a4 <isTimerExpired>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d009      	beq.n	8000484 <automaticRun+0x128>
					setTimer(1, 1000);
 8000470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000474:	2001      	movs	r0, #1
 8000476:	f000 fec5 	bl	8001204 <setTimer>
					countB--;
 800047a:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <automaticRun+0x208>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a38      	ldr	r2, [pc, #224]	; (8000564 <automaticRun+0x208>)
 8000482:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <automaticRun+0x208>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dc50      	bgt.n	800052e <automaticRun+0x1d2>
					countB = timeAmber;
 800048c:	4b31      	ldr	r3, [pc, #196]	; (8000554 <automaticRun+0x1f8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a34      	ldr	r2, [pc, #208]	; (8000564 <automaticRun+0x208>)
 8000492:	6013      	str	r3, [r2, #0]
					stateB = AMBER;
 8000494:	4b32      	ldr	r3, [pc, #200]	; (8000560 <automaticRun+0x204>)
 8000496:	2202      	movs	r2, #2
 8000498:	601a      	str	r2, [r3, #0]
				}
			break;
 800049a:	e048      	b.n	800052e <automaticRun+0x1d2>
		case AMBER:
				amberB();
 800049c:	f000 fc7c 	bl	8000d98 <amberB>
				if(isTimerExpired(1)){
 80004a0:	2001      	movs	r0, #1
 80004a2:	f000 feff 	bl	80012a4 <isTimerExpired>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d009      	beq.n	80004c0 <automaticRun+0x164>
					setTimer(1, 1000);
 80004ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 fea7 	bl	8001204 <setTimer>
					countB--;
 80004b6:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <automaticRun+0x208>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a29      	ldr	r2, [pc, #164]	; (8000564 <automaticRun+0x208>)
 80004be:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <automaticRun+0x208>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dc34      	bgt.n	8000532 <automaticRun+0x1d6>
					countB = timeRed;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <automaticRun+0x1fc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a25      	ldr	r2, [pc, #148]	; (8000564 <automaticRun+0x208>)
 80004ce:	6013      	str	r3, [r2, #0]
					stateB = RED;
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <automaticRun+0x204>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
				}
			break;
 80004d6:	e02c      	b.n	8000532 <automaticRun+0x1d6>
		case RED:
				redB();
 80004d8:	f000 fc76 	bl	8000dc8 <redB>
				if(isTimerExpired(1)){
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 fee1 	bl	80012a4 <isTimerExpired>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d009      	beq.n	80004fc <automaticRun+0x1a0>
					setTimer(1, 1000);
 80004e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fe89 	bl	8001204 <setTimer>
					countB--;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <automaticRun+0x208>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	3b01      	subs	r3, #1
 80004f8:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <automaticRun+0x208>)
 80004fa:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <automaticRun+0x208>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc18      	bgt.n	8000536 <automaticRun+0x1da>
					countB = timeGreen;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <automaticRun+0x200>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <automaticRun+0x208>)
 800050a:	6013      	str	r3, [r2, #0]
					stateB = GREEN;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <automaticRun+0x204>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
				}
			break;
 8000512:	e010      	b.n	8000536 <automaticRun+0x1da>
		default:
			stateB = RED;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <automaticRun+0x204>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
			countB = timeRed;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <automaticRun+0x1fc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <automaticRun+0x208>)
 8000520:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000522:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fe6c 	bl	8001204 <setTimer>
			break;
 800052c:	e004      	b.n	8000538 <automaticRun+0x1dc>
			break;
 800052e:	bf00      	nop
 8000530:	e002      	b.n	8000538 <automaticRun+0x1dc>
			break;
 8000532:	bf00      	nop
 8000534:	e000      	b.n	8000538 <automaticRun+0x1dc>
			break;
 8000536:	bf00      	nop
	}
	displayTime(countA, countB);
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <automaticRun+0x1f4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <automaticRun+0x208>)
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f000 faa2 	bl	8000a8c <displayTime>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000078 	.word	0x20000078
 8000550:	20000074 	.word	0x20000074
 8000554:	20000048 	.word	0x20000048
 8000558:	2000004c 	.word	0x2000004c
 800055c:	20000040 	.word	0x20000040
 8000560:	20000070 	.word	0x20000070
 8000564:	2000006c 	.word	0x2000006c

08000568 <modifyGreen>:
 *      Author: Admin
 */

#include "fsmModify.h"

void modifyGreen(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	if(isTimerExpired(0)){
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fe99 	bl	80012a4 <isTimerExpired>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d006      	beq.n	8000586 <modifyGreen+0x1e>
		greenBlinky();
 8000578:	f000 fc3e 	bl	8000df8 <greenBlinky>
		setTimer(0, 500);
 800057c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fe3f 	bl	8001204 <setTimer>
	}
	displayTime(4, timeTemp);
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <modifyGreen+0xa0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	2004      	movs	r0, #4
 800058e:	f000 fa7d 	bl	8000a8c <displayTime>
	if(isButtonPressed1s(1)) {
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff fe62 	bl	800025c <isButtonPressed1s>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d013      	beq.n	80005c6 <modifyGreen+0x5e>
		timeTemp = (timeTemp + 1) % 100;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <modifyGreen+0xa0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <modifyGreen+0xa4>)
 80005a6:	fb83 1302 	smull	r1, r3, r3, r2
 80005aa:	1159      	asrs	r1, r3, #5
 80005ac:	17d3      	asrs	r3, r2, #31
 80005ae:	1acb      	subs	r3, r1, r3
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	fb01 f303 	mul.w	r3, r1, r3
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <modifyGreen+0xa0>)
 80005ba:	6013      	str	r3, [r2, #0]
		setTimer(3, 500);
 80005bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 fe1f 	bl	8001204 <setTimer>
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % 100;
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fe26 	bl	8000218 <isButtonPressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00e      	beq.n	80005f0 <modifyGreen+0x88>
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <modifyGreen+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <modifyGreen+0xa4>)
 80005da:	fb83 1302 	smull	r1, r3, r3, r2
 80005de:	1159      	asrs	r1, r3, #5
 80005e0:	17d3      	asrs	r3, r2, #31
 80005e2:	1acb      	subs	r3, r1, r3
 80005e4:	2164      	movs	r1, #100	; 0x64
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <modifyGreen+0xa0>)
 80005ee:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) timeGreen = timeTemp;
 80005f0:	2002      	movs	r0, #2
 80005f2:	f7ff fe11 	bl	8000218 <isButtonPressed>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <modifyGreen+0x9c>
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <modifyGreen+0xa0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <modifyGreen+0xa8>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000044 	.word	0x20000044
 800060c:	51eb851f 	.word	0x51eb851f
 8000610:	20000040 	.word	0x20000040

08000614 <modifyAmber>:
void modifyAmber(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	if(isTimerExpired(0)){
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fe43 	bl	80012a4 <isTimerExpired>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d006      	beq.n	8000632 <modifyAmber+0x1e>
		amberBlinky();
 8000624:	f000 fc10 	bl	8000e48 <amberBlinky>
		setTimer(0, 500);
 8000628:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fde9 	bl	8001204 <setTimer>
	}
	displayTime(3, timeTemp);
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <modifyAmber+0xa0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	2003      	movs	r0, #3
 800063a:	f000 fa27 	bl	8000a8c <displayTime>
	if(isButtonPressed1s(1)) {
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fe0c 	bl	800025c <isButtonPressed1s>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d013      	beq.n	8000672 <modifyAmber+0x5e>
		timeTemp = (timeTemp + 1) % 100;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <modifyAmber+0xa0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <modifyAmber+0xa4>)
 8000652:	fb83 1302 	smull	r1, r3, r3, r2
 8000656:	1159      	asrs	r1, r3, #5
 8000658:	17d3      	asrs	r3, r2, #31
 800065a:	1acb      	subs	r3, r1, r3
 800065c:	2164      	movs	r1, #100	; 0x64
 800065e:	fb01 f303 	mul.w	r3, r1, r3
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <modifyAmber+0xa0>)
 8000666:	6013      	str	r3, [r2, #0]
		setTimer(3, 500);
 8000668:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800066c:	2003      	movs	r0, #3
 800066e:	f000 fdc9 	bl	8001204 <setTimer>
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % 100;
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fdd0 	bl	8000218 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00e      	beq.n	800069c <modifyAmber+0x88>
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <modifyAmber+0xa0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <modifyAmber+0xa4>)
 8000686:	fb83 1302 	smull	r1, r3, r3, r2
 800068a:	1159      	asrs	r1, r3, #5
 800068c:	17d3      	asrs	r3, r2, #31
 800068e:	1acb      	subs	r3, r1, r3
 8000690:	2164      	movs	r1, #100	; 0x64
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <modifyAmber+0xa0>)
 800069a:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) timeAmber = timeTemp;
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff fdbb 	bl	8000218 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <modifyAmber+0x9c>
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <modifyAmber+0xa0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <modifyAmber+0xa8>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000044 	.word	0x20000044
 80006b8:	51eb851f 	.word	0x51eb851f
 80006bc:	20000048 	.word	0x20000048

080006c0 <modifyRed>:
void modifyRed(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	if(isTimerExpired(0)){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fded 	bl	80012a4 <isTimerExpired>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d006      	beq.n	80006de <modifyRed+0x1e>
		redBlinky();
 80006d0:	f000 fbe2 	bl	8000e98 <redBlinky>
		setTimer(0, 500);
 80006d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fd93 	bl	8001204 <setTimer>
	}
	displayTime(2, timeTemp);
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <modifyRed+0xa0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f9d1 	bl	8000a8c <displayTime>
	if(isButtonPressed1s(1)) {
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fdb6 	bl	800025c <isButtonPressed1s>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d013      	beq.n	800071e <modifyRed+0x5e>
		timeTemp = (timeTemp + 1) % 100;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <modifyRed+0xa0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <modifyRed+0xa4>)
 80006fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000702:	1159      	asrs	r1, r3, #5
 8000704:	17d3      	asrs	r3, r2, #31
 8000706:	1acb      	subs	r3, r1, r3
 8000708:	2164      	movs	r1, #100	; 0x64
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <modifyRed+0xa0>)
 8000712:	6013      	str	r3, [r2, #0]
		setTimer(3, 500);
 8000714:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000718:	2003      	movs	r0, #3
 800071a:	f000 fd73 	bl	8001204 <setTimer>
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % 100;
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd7a 	bl	8000218 <isButtonPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00e      	beq.n	8000748 <modifyRed+0x88>
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <modifyRed+0xa0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <modifyRed+0xa4>)
 8000732:	fb83 1302 	smull	r1, r3, r3, r2
 8000736:	1159      	asrs	r1, r3, #5
 8000738:	17d3      	asrs	r3, r2, #31
 800073a:	1acb      	subs	r3, r1, r3
 800073c:	2164      	movs	r1, #100	; 0x64
 800073e:	fb01 f303 	mul.w	r3, r1, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <modifyRed+0xa0>)
 8000746:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) timeRed = timeTemp;
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff fd65 	bl	8000218 <isButtonPressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <modifyRed+0x9c>
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <modifyRed+0xa0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <modifyRed+0xa8>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000044 	.word	0x20000044
 8000764:	51eb851f 	.word	0x51eb851f
 8000768:	2000004c 	.word	0x2000004c

0800076c <display7SEG>:
#ifndef SRC_LEDTRAFFIC_C_
#define SRC_LEDTRAFFIC_C_

#include "ledTraffic.h"

void display7SEG(int num){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b09      	cmp	r3, #9
 8000778:	f200 8180 	bhi.w	8000a7c <display7SEG+0x310>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <display7SEG+0x18>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007ad 	.word	0x080007ad
 8000788:	080007f5 	.word	0x080007f5
 800078c:	0800083d 	.word	0x0800083d
 8000790:	08000885 	.word	0x08000885
 8000794:	080008cd 	.word	0x080008cd
 8000798:	08000915 	.word	0x08000915
 800079c:	0800095d 	.word	0x0800095d
 80007a0:	080009a5 	.word	0x080009a5
 80007a4:	080009ed 	.word	0x080009ed
 80007a8:	08000a35 	.word	0x08000a35
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	48b5      	ldr	r0, [pc, #724]	; (8000a88 <display7SEG+0x31c>)
 80007b2:	f001 f96a 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	48b3      	ldr	r0, [pc, #716]	; (8000a88 <display7SEG+0x31c>)
 80007bc:	f001 f965 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	48b0      	ldr	r0, [pc, #704]	; (8000a88 <display7SEG+0x31c>)
 80007c6:	f001 f960 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	48ae      	ldr	r0, [pc, #696]	; (8000a88 <display7SEG+0x31c>)
 80007d0:	f001 f95b 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	48ab      	ldr	r0, [pc, #684]	; (8000a88 <display7SEG+0x31c>)
 80007da:	f001 f956 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	48a9      	ldr	r0, [pc, #676]	; (8000a88 <display7SEG+0x31c>)
 80007e4:	f001 f951 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	48a6      	ldr	r0, [pc, #664]	; (8000a88 <display7SEG+0x31c>)
 80007ee:	f001 f94c 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 80007f2:	e144      	b.n	8000a7e <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_SET );
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	48a3      	ldr	r0, [pc, #652]	; (8000a88 <display7SEG+0x31c>)
 80007fa:	f001 f946 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80007fe:	2200      	movs	r2, #0
 8000800:	2102      	movs	r1, #2
 8000802:	48a1      	ldr	r0, [pc, #644]	; (8000a88 <display7SEG+0x31c>)
 8000804:	f001 f941 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000808:	2200      	movs	r2, #0
 800080a:	2104      	movs	r1, #4
 800080c:	489e      	ldr	r0, [pc, #632]	; (8000a88 <display7SEG+0x31c>)
 800080e:	f001 f93c 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 8000812:	2201      	movs	r2, #1
 8000814:	2108      	movs	r1, #8
 8000816:	489c      	ldr	r0, [pc, #624]	; (8000a88 <display7SEG+0x31c>)
 8000818:	f001 f937 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4899      	ldr	r0, [pc, #612]	; (8000a88 <display7SEG+0x31c>)
 8000822:	f001 f932 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	4897      	ldr	r0, [pc, #604]	; (8000a88 <display7SEG+0x31c>)
 800082c:	f001 f92d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 8000830:	2201      	movs	r2, #1
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	4894      	ldr	r0, [pc, #592]	; (8000a88 <display7SEG+0x31c>)
 8000836:	f001 f928 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 800083a:	e120      	b.n	8000a7e <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	4891      	ldr	r0, [pc, #580]	; (8000a88 <display7SEG+0x31c>)
 8000842:	f001 f922 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	488f      	ldr	r0, [pc, #572]	; (8000a88 <display7SEG+0x31c>)
 800084c:	f001 f91d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_SET );
 8000850:	2201      	movs	r2, #1
 8000852:	2104      	movs	r1, #4
 8000854:	488c      	ldr	r0, [pc, #560]	; (8000a88 <display7SEG+0x31c>)
 8000856:	f001 f918 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <display7SEG+0x31c>)
 8000860:	f001 f913 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	4887      	ldr	r0, [pc, #540]	; (8000a88 <display7SEG+0x31c>)
 800086a:	f001 f90e 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 800086e:	2201      	movs	r2, #1
 8000870:	2120      	movs	r1, #32
 8000872:	4885      	ldr	r0, [pc, #532]	; (8000a88 <display7SEG+0x31c>)
 8000874:	f001 f909 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	4882      	ldr	r0, [pc, #520]	; (8000a88 <display7SEG+0x31c>)
 800087e:	f001 f904 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 8000882:	e0fc      	b.n	8000a7e <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	487f      	ldr	r0, [pc, #508]	; (8000a88 <display7SEG+0x31c>)
 800088a:	f001 f8fe 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	487d      	ldr	r0, [pc, #500]	; (8000a88 <display7SEG+0x31c>)
 8000894:	f001 f8f9 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	487a      	ldr	r0, [pc, #488]	; (8000a88 <display7SEG+0x31c>)
 800089e:	f001 f8f4 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4878      	ldr	r0, [pc, #480]	; (8000a88 <display7SEG+0x31c>)
 80008a8:	f001 f8ef 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4875      	ldr	r0, [pc, #468]	; (8000a88 <display7SEG+0x31c>)
 80008b2:	f001 f8ea 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 80008b6:	2201      	movs	r2, #1
 80008b8:	2120      	movs	r1, #32
 80008ba:	4873      	ldr	r0, [pc, #460]	; (8000a88 <display7SEG+0x31c>)
 80008bc:	f001 f8e5 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	4870      	ldr	r0, [pc, #448]	; (8000a88 <display7SEG+0x31c>)
 80008c6:	f001 f8e0 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 80008ca:	e0d8      	b.n	8000a7e <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_SET );
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	486d      	ldr	r0, [pc, #436]	; (8000a88 <display7SEG+0x31c>)
 80008d2:	f001 f8da 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	486b      	ldr	r0, [pc, #428]	; (8000a88 <display7SEG+0x31c>)
 80008dc:	f001 f8d5 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4868      	ldr	r0, [pc, #416]	; (8000a88 <display7SEG+0x31c>)
 80008e6:	f001 f8d0 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 80008ea:	2201      	movs	r2, #1
 80008ec:	2108      	movs	r1, #8
 80008ee:	4866      	ldr	r0, [pc, #408]	; (8000a88 <display7SEG+0x31c>)
 80008f0:	f001 f8cb 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4863      	ldr	r0, [pc, #396]	; (8000a88 <display7SEG+0x31c>)
 80008fa:	f001 f8c6 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	4861      	ldr	r0, [pc, #388]	; (8000a88 <display7SEG+0x31c>)
 8000904:	f001 f8c1 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	485e      	ldr	r0, [pc, #376]	; (8000a88 <display7SEG+0x31c>)
 800090e:	f001 f8bc 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 8000912:	e0b4      	b.n	8000a7e <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	485b      	ldr	r0, [pc, #364]	; (8000a88 <display7SEG+0x31c>)
 800091a:	f001 f8b6 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_SET );
 800091e:	2201      	movs	r2, #1
 8000920:	2102      	movs	r1, #2
 8000922:	4859      	ldr	r0, [pc, #356]	; (8000a88 <display7SEG+0x31c>)
 8000924:	f001 f8b1 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	4856      	ldr	r0, [pc, #344]	; (8000a88 <display7SEG+0x31c>)
 800092e:	f001 f8ac 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4854      	ldr	r0, [pc, #336]	; (8000a88 <display7SEG+0x31c>)
 8000938:	f001 f8a7 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	4851      	ldr	r0, [pc, #324]	; (8000a88 <display7SEG+0x31c>)
 8000942:	f001 f8a2 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <display7SEG+0x31c>)
 800094c:	f001 f89d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000950:	2200      	movs	r2, #0
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	484c      	ldr	r0, [pc, #304]	; (8000a88 <display7SEG+0x31c>)
 8000956:	f001 f898 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 800095a:	e090      	b.n	8000a7e <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	4849      	ldr	r0, [pc, #292]	; (8000a88 <display7SEG+0x31c>)
 8000962:	f001 f892 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_SET );
 8000966:	2201      	movs	r2, #1
 8000968:	2102      	movs	r1, #2
 800096a:	4847      	ldr	r0, [pc, #284]	; (8000a88 <display7SEG+0x31c>)
 800096c:	f001 f88d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000970:	2200      	movs	r2, #0
 8000972:	2104      	movs	r1, #4
 8000974:	4844      	ldr	r0, [pc, #272]	; (8000a88 <display7SEG+0x31c>)
 8000976:	f001 f888 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4842      	ldr	r0, [pc, #264]	; (8000a88 <display7SEG+0x31c>)
 8000980:	f001 f883 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	483f      	ldr	r0, [pc, #252]	; (8000a88 <display7SEG+0x31c>)
 800098a:	f001 f87e 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	483d      	ldr	r0, [pc, #244]	; (8000a88 <display7SEG+0x31c>)
 8000994:	f001 f879 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000998:	2200      	movs	r2, #0
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	483a      	ldr	r0, [pc, #232]	; (8000a88 <display7SEG+0x31c>)
 800099e:	f001 f874 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 80009a2:	e06c      	b.n	8000a7e <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	4837      	ldr	r0, [pc, #220]	; (8000a88 <display7SEG+0x31c>)
 80009aa:	f001 f86e 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <display7SEG+0x31c>)
 80009b4:	f001 f869 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80009b8:	2200      	movs	r2, #0
 80009ba:	2104      	movs	r1, #4
 80009bc:	4832      	ldr	r0, [pc, #200]	; (8000a88 <display7SEG+0x31c>)
 80009be:	f001 f864 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <display7SEG+0x31c>)
 80009c8:	f001 f85f 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	482d      	ldr	r0, [pc, #180]	; (8000a88 <display7SEG+0x31c>)
 80009d2:	f001 f85a 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 80009d6:	2201      	movs	r2, #1
 80009d8:	2120      	movs	r1, #32
 80009da:	482b      	ldr	r0, [pc, #172]	; (8000a88 <display7SEG+0x31c>)
 80009dc:	f001 f855 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	4828      	ldr	r0, [pc, #160]	; (8000a88 <display7SEG+0x31c>)
 80009e6:	f001 f850 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 80009ea:	e048      	b.n	8000a7e <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4825      	ldr	r0, [pc, #148]	; (8000a88 <display7SEG+0x31c>)
 80009f2:	f001 f84a 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <display7SEG+0x31c>)
 80009fc:	f001 f845 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <display7SEG+0x31c>)
 8000a06:	f001 f840 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <display7SEG+0x31c>)
 8000a10:	f001 f83b 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	481b      	ldr	r0, [pc, #108]	; (8000a88 <display7SEG+0x31c>)
 8000a1a:	f001 f836 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <display7SEG+0x31c>)
 8000a24:	f001 f831 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4816      	ldr	r0, [pc, #88]	; (8000a88 <display7SEG+0x31c>)
 8000a2e:	f001 f82c 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 8000a32:	e024      	b.n	8000a7e <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <display7SEG+0x31c>)
 8000a3a:	f001 f826 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <display7SEG+0x31c>)
 8000a44:	f001 f821 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <display7SEG+0x31c>)
 8000a4e:	f001 f81c 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <display7SEG+0x31c>)
 8000a58:	f001 f817 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <display7SEG+0x31c>)
 8000a62:	f001 f812 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <display7SEG+0x31c>)
 8000a6c:	f001 f80d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <display7SEG+0x31c>)
 8000a76:	f001 f808 	bl	8001a8a <HAL_GPIO_WritePin>
		break;
 8000a7a:	e000      	b.n	8000a7e <display7SEG+0x312>
	default:
		break;
 8000a7c:	bf00      	nop
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <displayTime>:
int LED = 0;
void displayTime(int trafficA, int trafficB){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	switch(LED){
 8000a96:	4b8d      	ldr	r3, [pc, #564]	; (8000ccc <displayTime+0x240>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	f200 80d8 	bhi.w	8000c50 <displayTime+0x1c4>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <displayTime+0x1c>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000b87 	.word	0x08000b87
 8000ab4:	08000be7 	.word	0x08000be7
	case 0:
		display7SEG(trafficA / 10);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a85      	ldr	r2, [pc, #532]	; (8000cd0 <displayTime+0x244>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	1092      	asrs	r2, r2, #2
 8000ac2:	17db      	asrs	r3, r3, #31
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe50 	bl	800076c <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_RESET );
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4880      	ldr	r0, [pc, #512]	; (8000cd4 <displayTime+0x248>)
 8000ad4:	f000 ffd9 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	487d      	ldr	r0, [pc, #500]	; (8000cd4 <displayTime+0x248>)
 8000ae0:	f000 ffd3 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aea:	487a      	ldr	r0, [pc, #488]	; (8000cd4 <displayTime+0x248>)
 8000aec:	f000 ffcd 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	4877      	ldr	r0, [pc, #476]	; (8000cd4 <displayTime+0x248>)
 8000af8:	f000 ffc7 	bl	8001a8a <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000afc:	2002      	movs	r0, #2
 8000afe:	f000 fbd1 	bl	80012a4 <isTimerExpired>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80d3 	beq.w	8000cb0 <displayTime+0x224>
			LED = 1;
 8000b0a:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <displayTime+0x240>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
			setTimer(2, TIMEDISPLAY);
 8000b10:	217d      	movs	r1, #125	; 0x7d
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 fb76 	bl	8001204 <setTimer>
		}
		break;
 8000b18:	e0ca      	b.n	8000cb0 <displayTime+0x224>
	case 1:
		display7SEG(trafficA % 10);
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <displayTime+0x244>)
 8000b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b22:	1099      	asrs	r1, r3, #2
 8000b24:	17d3      	asrs	r3, r2, #31
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1ad1      	subs	r1, r2, r3
 8000b32:	4608      	mov	r0, r1
 8000b34:	f7ff fe1a 	bl	800076c <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4865      	ldr	r0, [pc, #404]	; (8000cd4 <displayTime+0x248>)
 8000b40:	f000 ffa3 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_RESET );
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4862      	ldr	r0, [pc, #392]	; (8000cd4 <displayTime+0x248>)
 8000b4c:	f000 ff9d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	485f      	ldr	r0, [pc, #380]	; (8000cd4 <displayTime+0x248>)
 8000b58:	f000 ff97 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b62:	485c      	ldr	r0, [pc, #368]	; (8000cd4 <displayTime+0x248>)
 8000b64:	f000 ff91 	bl	8001a8a <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 fb9b 	bl	80012a4 <isTimerExpired>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 809f 	beq.w	8000cb4 <displayTime+0x228>
			LED = 2;
 8000b76:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <displayTime+0x240>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	601a      	str	r2, [r3, #0]
			setTimer(2, TIMEDISPLAY);
 8000b7c:	217d      	movs	r1, #125	; 0x7d
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f000 fb40 	bl	8001204 <setTimer>
		}
		break;
 8000b84:	e096      	b.n	8000cb4 <displayTime+0x228>
	case 2:
		display7SEG(trafficB / 10);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4a51      	ldr	r2, [pc, #324]	; (8000cd0 <displayTime+0x244>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1092      	asrs	r2, r2, #2
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fde9 	bl	800076c <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba0:	484c      	ldr	r0, [pc, #304]	; (8000cd4 <displayTime+0x248>)
 8000ba2:	f000 ff72 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	4849      	ldr	r0, [pc, #292]	; (8000cd4 <displayTime+0x248>)
 8000bae:	f000 ff6c 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_RESET );
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb8:	4846      	ldr	r0, [pc, #280]	; (8000cd4 <displayTime+0x248>)
 8000bba:	f000 ff66 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc4:	4843      	ldr	r0, [pc, #268]	; (8000cd4 <displayTime+0x248>)
 8000bc6:	f000 ff60 	bl	8001a8a <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fb6a 	bl	80012a4 <isTimerExpired>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d070      	beq.n	8000cb8 <displayTime+0x22c>
			LED = 3;
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <displayTime+0x240>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	601a      	str	r2, [r3, #0]
			setTimer(2, TIMEDISPLAY);
 8000bdc:	217d      	movs	r1, #125	; 0x7d
 8000bde:	2002      	movs	r0, #2
 8000be0:	f000 fb10 	bl	8001204 <setTimer>
		}

		break;
 8000be4:	e068      	b.n	8000cb8 <displayTime+0x22c>
	case 3:
		display7SEG(trafficB % 10);
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <displayTime+0x244>)
 8000bea:	fb83 1302 	smull	r1, r3, r3, r2
 8000bee:	1099      	asrs	r1, r3, #2
 8000bf0:	17d3      	asrs	r3, r2, #31
 8000bf2:	1ac9      	subs	r1, r1, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	1ad1      	subs	r1, r2, r3
 8000bfe:	4608      	mov	r0, r1
 8000c00:	f7ff fdb4 	bl	800076c <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <displayTime+0x248>)
 8000c0c:	f000 ff3d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <displayTime+0x248>)
 8000c18:	f000 ff37 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <displayTime+0x248>)
 8000c24:	f000 ff31 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_RESET );
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2e:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <displayTime+0x248>)
 8000c30:	f000 ff2b 	bl	8001a8a <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 fb35 	bl	80012a4 <isTimerExpired>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d03d      	beq.n	8000cbc <displayTime+0x230>
			LED = 0;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <displayTime+0x240>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
			setTimer(2, TIMEDISPLAY);
 8000c46:	217d      	movs	r1, #125	; 0x7d
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 fadb 	bl	8001204 <setTimer>
		}

		break;
 8000c4e:	e035      	b.n	8000cbc <displayTime+0x230>
	default:
		display7SEG(trafficA / 10);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <displayTime+0x244>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fd84 	bl	800076c <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	481a      	ldr	r0, [pc, #104]	; (8000cd4 <displayTime+0x248>)
 8000c6c:	f000 ff0d 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <displayTime+0x248>)
 8000c78:	f000 ff07 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <displayTime+0x248>)
 8000c84:	f000 ff01 	bl	8001a8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <displayTime+0x248>)
 8000c90:	f000 fefb 	bl	8001a8a <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000c94:	2002      	movs	r0, #2
 8000c96:	f000 fb05 	bl	80012a4 <isTimerExpired>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00f      	beq.n	8000cc0 <displayTime+0x234>
			LED = 0;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <displayTime+0x240>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
			setTimer(2, TIMEDISPLAY);
 8000ca6:	217d      	movs	r1, #125	; 0x7d
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f000 faab 	bl	8001204 <setTimer>
		}

		break;
 8000cae:	e007      	b.n	8000cc0 <displayTime+0x234>
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e006      	b.n	8000cc2 <displayTime+0x236>
		break;
 8000cb4:	bf00      	nop
 8000cb6:	e004      	b.n	8000cc2 <displayTime+0x236>
		break;
 8000cb8:	bf00      	nop
 8000cba:	e002      	b.n	8000cc2 <displayTime+0x236>
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <displayTime+0x236>
		break;
 8000cc0:	bf00      	nop
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000003c 	.word	0x2000003c
 8000cd0:	66666667 	.word	0x66666667
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <greenA>:
void greenA(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <greenA+0x2c>)
 8000ce4:	f000 fed1 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <greenA+0x2c>)
 8000cf0:	f000 fecb 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_RESET );
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	4802      	ldr	r0, [pc, #8]	; (8000d04 <greenA+0x2c>)
 8000cfc:	f000 fec5 	bl	8001a8a <HAL_GPIO_WritePin>

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010800 	.word	0x40010800

08000d08 <amberA>:
void amberA(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4808      	ldr	r0, [pc, #32]	; (8000d34 <amberA+0x2c>)
 8000d14:	f000 feb9 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_RESET );
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <amberA+0x2c>)
 8000d20:	f000 feb3 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2a:	4802      	ldr	r0, [pc, #8]	; (8000d34 <amberA+0x2c>)
 8000d2c:	f000 fead 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010800 	.word	0x40010800

08000d38 <redA>:
void redA(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_RESET );
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4808      	ldr	r0, [pc, #32]	; (8000d64 <redA+0x2c>)
 8000d44:	f000 fea1 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <redA+0x2c>)
 8000d50:	f000 fe9b 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	4802      	ldr	r0, [pc, #8]	; (8000d64 <redA+0x2c>)
 8000d5c:	f000 fe95 	bl	8001a8a <HAL_GPIO_WritePin>

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010800 	.word	0x40010800

08000d68 <greenB>:
void greenB(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	4808      	ldr	r0, [pc, #32]	; (8000d94 <greenB+0x2c>)
 8000d74:	f000 fe89 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <greenB+0x2c>)
 8000d80:	f000 fe83 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_RESET );
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	4802      	ldr	r0, [pc, #8]	; (8000d94 <greenB+0x2c>)
 8000d8c:	f000 fe7d 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40010800 	.word	0x40010800

08000d98 <amberB>:
void amberB(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <amberB+0x2c>)
 8000da4:	f000 fe71 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_RESET );
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <amberB+0x2c>)
 8000db0:	f000 fe6b 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dba:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <amberB+0x2c>)
 8000dbc:	f000 fe65 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <redB>:
void redB(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_RESET );
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4808      	ldr	r0, [pc, #32]	; (8000df4 <redB+0x2c>)
 8000dd4:	f000 fe59 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <redB+0x2c>)
 8000de0:	f000 fe53 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dea:	4802      	ldr	r0, [pc, #8]	; (8000df4 <redB+0x2c>)
 8000dec:	f000 fe4d 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010800 	.word	0x40010800

08000df8 <greenBlinky>:
void greenBlinky(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <greenBlinky+0x4c>)
 8000e04:	f000 fe41 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <greenBlinky+0x4c>)
 8000e10:	f000 fe3b 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED3_GPIO_Port , LED3_Pin);
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <greenBlinky+0x4c>)
 8000e1a:	f000 fe4e 	bl	8001aba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <greenBlinky+0x4c>)
 8000e26:	f000 fe30 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <greenBlinky+0x4c>)
 8000e32:	f000 fe2a 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED6_GPIO_Port , LED6_Pin );
 8000e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <greenBlinky+0x4c>)
 8000e3c:	f000 fe3d 	bl	8001aba <HAL_GPIO_TogglePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010800 	.word	0x40010800

08000e48 <amberBlinky>:
void amberBlinky(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <amberBlinky+0x4c>)
 8000e54:	f000 fe19 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED2_GPIO_Port , LED2_Pin );
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <amberBlinky+0x4c>)
 8000e5e:	f000 fe2c 	bl	8001aba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <amberBlinky+0x4c>)
 8000e6a:	f000 fe0e 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <amberBlinky+0x4c>)
 8000e76:	f000 fe08 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED5_GPIO_Port , LED5_Pin );
 8000e7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <amberBlinky+0x4c>)
 8000e80:	f000 fe1b 	bl	8001aba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8a:	4802      	ldr	r0, [pc, #8]	; (8000e94 <amberBlinky+0x4c>)
 8000e8c:	f000 fdfd 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010800 	.word	0x40010800

08000e98 <redBlinky>:
void redBlinky(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin ( LED1_GPIO_Port , LED1_Pin );
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <redBlinky+0x4c>)
 8000ea2:	f000 fe0a 	bl	8001aba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <redBlinky+0x4c>)
 8000eae:	f000 fdec 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <redBlinky+0x4c>)
 8000eba:	f000 fde6 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED4_GPIO_Port , LED4_Pin );
 8000ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <redBlinky+0x4c>)
 8000ec4:	f000 fdf9 	bl	8001aba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <redBlinky+0x4c>)
 8000ed0:	f000 fddb 	bl	8001a8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <redBlinky+0x4c>)
 8000edc:	f000 fdd5 	bl	8001a8a <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010800 	.word	0x40010800

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 faa7 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f887 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000ef6:	f000 f8c1 	bl	800107c <MX_TIM2_Init>
  MX_GPIO_Init();
 8000efa:	f000 f90b 	bl	8001114 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int mode = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  setTimer(2, 250);
 8000f02:	21fa      	movs	r1, #250	; 0xfa
 8000f04:	2002      	movs	r0, #2
 8000f06:	f000 f97d 	bl	8001204 <setTimer>
  initAutomatic();
 8000f0a:	f7ff f9cb 	bl	80002a4 <initAutomatic>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f0e:	4838      	ldr	r0, [pc, #224]	; (8000ff0 <main+0x108>)
 8000f10:	f001 fa18 	bl	8002344 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isButtonPressed(0) == 1){
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff f97f 	bl	8000218 <isButtonPressed>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <main+0x3c>
		  testLed();
 8000f20:	f7ff f914 	bl	800014c <testLed>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d853      	bhi.n	8000fd2 <main+0xea>
 8000f2a:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <main+0x48>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f69 	.word	0x08000f69
 8000f38:	08000f91 	.word	0x08000f91
 8000f3c:	08000fb9 	.word	0x08000fb9
	  }
	  switch(mode){
		  case 0:
			  automaticRun();
 8000f40:	f7ff fa0c 	bl	800035c <automaticRun>
			  if(isButtonPressed(0)){
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff f967 	bl	8000218 <isButtonPressed>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d043      	beq.n	8000fd8 <main+0xf0>
				  timeTemp = timeRed;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <main+0x10c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <main+0x110>)
 8000f56:	6013      	str	r3, [r2, #0]
				  mode = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
				  setTimer(0, 500);
 8000f5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 f94f 	bl	8001204 <setTimer>
			  }
			  break;
 8000f66:	e037      	b.n	8000fd8 <main+0xf0>
		  case 1:
			  modifyRed();
 8000f68:	f7ff fbaa 	bl	80006c0 <modifyRed>
			  if(isButtonPressed(0)){
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff f953 	bl	8000218 <isButtonPressed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d031      	beq.n	8000fdc <main+0xf4>
				  timeTemp = timeAmber;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <main+0x114>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <main+0x110>)
 8000f7e:	6013      	str	r3, [r2, #0]
				  mode = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
				  setTimer(0, 500);
 8000f84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f93b 	bl	8001204 <setTimer>
			  }
			  break;
 8000f8e:	e025      	b.n	8000fdc <main+0xf4>
		  case 2:
			  modifyAmber();
 8000f90:	f7ff fb40 	bl	8000614 <modifyAmber>
			  if(isButtonPressed(0)){
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff f93f 	bl	8000218 <isButtonPressed>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d01f      	beq.n	8000fe0 <main+0xf8>
				  timeTemp = timeGreen;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <main+0x118>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <main+0x110>)
 8000fa6:	6013      	str	r3, [r2, #0]
				  mode = 3;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	607b      	str	r3, [r7, #4]
				  setTimer(0, 500);
 8000fac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f927 	bl	8001204 <setTimer>
			  }
			  break;
 8000fb6:	e013      	b.n	8000fe0 <main+0xf8>
		  case 3:
			  modifyGreen();
 8000fb8:	f7ff fad6 	bl	8000568 <modifyGreen>
			  if(isButtonPressed(0)){
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff f92b 	bl	8000218 <isButtonPressed>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00d      	beq.n	8000fe4 <main+0xfc>
				  mode = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
				  afterModify();
 8000fcc:	f7ff f99e 	bl	800030c <afterModify>
			  }
			  break;
 8000fd0:	e008      	b.n	8000fe4 <main+0xfc>
		  default:
			  mode = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
			  break;
 8000fd6:	e006      	b.n	8000fe6 <main+0xfe>
			  break;
 8000fd8:	bf00      	nop
 8000fda:	e004      	b.n	8000fe6 <main+0xfe>
			  break;
 8000fdc:	bf00      	nop
 8000fde:	e002      	b.n	8000fe6 <main+0xfe>
			  break;
 8000fe0:	bf00      	nop
 8000fe2:	e000      	b.n	8000fe6 <main+0xfe>
			  break;
 8000fe4:	bf00      	nop
//		  break;
//	  default:
//		  count = 1;
//		  break;
//	  }
	  HAL_Delay(200);
 8000fe6:	20c8      	movs	r0, #200	; 0xc8
 8000fe8:	f000 fa8c 	bl	8001504 <HAL_Delay>
	  if(isButtonPressed(0) == 1){
 8000fec:	e792      	b.n	8000f14 <main+0x2c>
 8000fee:	bf00      	nop
 8000ff0:	2000007c 	.word	0x2000007c
 8000ff4:	2000004c 	.word	0x2000004c
 8000ff8:	20000044 	.word	0x20000044
 8000ffc:	20000048 	.word	0x20000048
 8001000:	20000040 	.word	0x20000040

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	; 0x40
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fd46 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2310      	movs	r3, #16
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fd56 	bl	8001aec <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001046:	f000 f8d8 	bl	80011fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 ffc2 	bl	8001fec <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800106e:	f000 f8c4 	bl	80011fa <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3740      	adds	r7, #64	; 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_TIM2_Init+0x94>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_TIM2_Init+0x94>)
 80010a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_TIM2_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b0:	2209      	movs	r2, #9
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM2_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_TIM2_Init+0x94>)
 80010c2:	f001 f8ef 	bl	80022a4 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010cc:	f000 f895 	bl	80011fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM2_Init+0x94>)
 80010de:	f001 fa6d 	bl	80025bc <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f887 	bl	80011fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_TIM2_Init+0x94>)
 80010fa:	f001 fc45 	bl	8002988 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001104:	f000 f879 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000007c 	.word	0x2000007c

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_GPIO_Init+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <MX_GPIO_Init+0xb8>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_GPIO_Init+0xb8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_GPIO_Init+0xb8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <MX_GPIO_Init+0xb8>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_GPIO_Init+0xb8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN1_Pin
 8001158:	2200      	movs	r2, #0
 800115a:	f24f 217f 	movw	r1, #62079	; 0xf27f
 800115e:	481c      	ldr	r0, [pc, #112]	; (80011d0 <MX_GPIO_Init+0xbc>)
 8001160:	f000 fc93 	bl	8001a8a <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|EN4_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|blinkyLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800116a:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_GPIO_Init+0xc0>)
 800116c:	f000 fc8d 	bl	8001a8a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : butt1_Pin butt2_Pin butt3_Pin */
  GPIO_InitStruct.Pin = butt1_Pin|butt2_Pin|butt3_Pin;
 8001170:	230e      	movs	r3, #14
 8001172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4619      	mov	r1, r3
 8001182:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_GPIO_Init+0xc0>)
 8001184:	f000 faf0 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin blinkyLed_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN1_Pin
 8001188:	f24f 237f 	movw	r3, #62079	; 0xf27f
 800118c:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN4_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|blinkyLed_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <MX_GPIO_Init+0xbc>)
 80011a2:	f000 fae1 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80011a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80011aa:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_GPIO_Init+0xc0>)
 80011c0:	f000 fad2 	bl	8001768 <HAL_GPIO_Init>

}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40010800 	.word	0x40010800

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	timeRun();
 80011e0:	f000 f830 	bl	8001244 <timeRun>
	if(htim->Instance == TIM2){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d101      	bne.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		buttonReading();
 80011ee:	f7fe ffb9 	bl	8000164 <buttonReading>
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001202:	e7fe      	b.n	8001202 <Error_Handler+0x8>

08001204 <setTimer>:
 */
#include "softwareTimer.h"
int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <setTimer+0x34>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2100      	movs	r1, #0
 8001214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <setTimer+0x38>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1092      	asrs	r2, r2, #2
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	4906      	ldr	r1, [pc, #24]	; (8001240 <setTimer+0x3c>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200000ec 	.word	0x200000ec
 800123c:	66666667 	.word	0x66666667
 8001240:	200000c4 	.word	0x200000c4

08001244 <timeRun>:

void timeRun(){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e01c      	b.n	800128a <timeRun+0x46>
		if(timer_counter[i] > 0){
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <timeRun+0x58>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	dd08      	ble.n	800126e <timeRun+0x2a>
			timer_counter[i]--;
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <timeRun+0x58>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <timeRun+0x58>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(timer_counter[i] <= 0){
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <timeRun+0x58>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc04      	bgt.n	8001284 <timeRun+0x40>
			timer_flag[i] = 1;
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <timeRun+0x5c>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2101      	movs	r1, #1
 8001280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 5; i++){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b04      	cmp	r3, #4
 800128e:	dddf      	ble.n	8001250 <timeRun+0xc>
		}
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	200000c4 	.word	0x200000c4
 80012a0:	200000ec 	.word	0x200000ec

080012a4 <isTimerExpired>:

int isTimerExpired(int index){
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1){
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <isTimerExpired+0x30>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <isTimerExpired+0x30>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2100      	movs	r1, #0
 80012be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <isTimerExpired+0x24>
	}
	return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200000ec 	.word	0x200000ec

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_MspInit+0x5c>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_MspInit+0x5c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_MspInit+0x5c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x5c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x5c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x5c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_MspInit+0x60>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_MspInit+0x60>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d113      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f000 f9c5 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f000 f9de 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f87f 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM2_IRQHandler+0x10>)
 80013da:	f000 ffff 	bl	80023dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000007c 	.word	0x2000007c

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff fff8 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fa:	490c      	ldr	r1, [pc, #48]	; (800142c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001410:	4c09      	ldr	r4, [pc, #36]	; (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f001 fb1d 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff fd61 	bl	8000ee8 <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001430:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 8001434:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001438:	20000118 	.word	0x20000118

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f947 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff ff3c 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f95f 	bl	800174e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f927 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000014 	.word	0x20000014
 80014c4:	2000001c 	.word	0x2000001c
 80014c8:	20000018 	.word	0x20000018

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	2000001c 	.word	0x2000001c
 80014ec:	20000114 	.word	0x20000114

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000114 	.word	0x20000114

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff0 	bl	80014f0 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffe0 	bl	80014f0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000001c 	.word	0x2000001c

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2d 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff42 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e148      	b.n	8001a0e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800177c:	2201      	movs	r2, #1
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8137 	bne.w	8001a08 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4aa3      	ldr	r2, [pc, #652]	; (8001a2c <HAL_GPIO_Init+0x2c4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017a4:	4aa1      	ldr	r2, [pc, #644]	; (8001a2c <HAL_GPIO_Init+0x2c4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d875      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017aa:	4aa1      	ldr	r2, [pc, #644]	; (8001a30 <HAL_GPIO_Init+0x2c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d058      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017b0:	4a9f      	ldr	r2, [pc, #636]	; (8001a30 <HAL_GPIO_Init+0x2c8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d86f      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017b6:	4a9f      	ldr	r2, [pc, #636]	; (8001a34 <HAL_GPIO_Init+0x2cc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d052      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017bc:	4a9d      	ldr	r2, [pc, #628]	; (8001a34 <HAL_GPIO_Init+0x2cc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d869      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017c2:	4a9d      	ldr	r2, [pc, #628]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04c      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017c8:	4a9b      	ldr	r2, [pc, #620]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d863      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017ce:	4a9b      	ldr	r2, [pc, #620]	; (8001a3c <HAL_GPIO_Init+0x2d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d046      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017d4:	4a99      	ldr	r2, [pc, #612]	; (8001a3c <HAL_GPIO_Init+0x2d4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d85d      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d82a      	bhi.n	8001834 <HAL_GPIO_Init+0xcc>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d859      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_GPIO_Init+0x80>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001863 	.word	0x08001863
 80017ec:	0800183d 	.word	0x0800183d
 80017f0:	0800184f 	.word	0x0800184f
 80017f4:	08001891 	.word	0x08001891
 80017f8:	08001897 	.word	0x08001897
 80017fc:	08001897 	.word	0x08001897
 8001800:	08001897 	.word	0x08001897
 8001804:	08001897 	.word	0x08001897
 8001808:	08001897 	.word	0x08001897
 800180c:	08001897 	.word	0x08001897
 8001810:	08001897 	.word	0x08001897
 8001814:	08001897 	.word	0x08001897
 8001818:	08001897 	.word	0x08001897
 800181c:	08001897 	.word	0x08001897
 8001820:	08001897 	.word	0x08001897
 8001824:	08001897 	.word	0x08001897
 8001828:	08001897 	.word	0x08001897
 800182c:	08001845 	.word	0x08001845
 8001830:	08001859 	.word	0x08001859
 8001834:	4a82      	ldr	r2, [pc, #520]	; (8001a40 <HAL_GPIO_Init+0x2d8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183a:	e02c      	b.n	8001896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e029      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	3304      	adds	r3, #4
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e024      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3308      	adds	r3, #8
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e01f      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	330c      	adds	r3, #12
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e01a      	b.n	8001898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186a:	2304      	movs	r3, #4
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e013      	b.n	8001898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	611a      	str	r2, [r3, #16]
          break;
 8001882:	e009      	b.n	8001898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	615a      	str	r2, [r3, #20]
          break;
 800188e:	e003      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x130>
          break;
 8001896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d801      	bhi.n	80018a2 <HAL_GPIO_Init+0x13a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	e001      	b.n	80018a6 <HAL_GPIO_Init+0x13e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d802      	bhi.n	80018b4 <HAL_GPIO_Init+0x14c>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x152>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	3b08      	subs	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	210f      	movs	r1, #15
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8090 	beq.w	8001a08 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_GPIO_Init+0x2dc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_GPIO_Init+0x2dc>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_GPIO_Init+0x2dc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001900:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x2e0>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2e4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1e0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2e8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1d8>
 800193c:	2302      	movs	r3, #2
 800193e:	e004      	b.n	800194a <HAL_GPIO_Init+0x1e2>
 8001940:	2303      	movs	r3, #3
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x1e2>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_GPIO_Init+0x1e2>
 8001948:	2300      	movs	r3, #0
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	f002 0203 	and.w	r2, r2, #3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	4093      	lsls	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195a:	493b      	ldr	r1, [pc, #236]	; (8001a48 <HAL_GPIO_Init+0x2e0>)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001974:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4933      	ldr	r1, [pc, #204]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 800198c:	4013      	ands	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	492d      	ldr	r1, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4929      	ldr	r1, [pc, #164]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4923      	ldr	r1, [pc, #140]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	491f      	ldr	r1, [pc, #124]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4919      	ldr	r1, [pc, #100]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4915      	ldr	r1, [pc, #84]	; (8001a58 <HAL_GPIO_Init+0x2f0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f aeaf 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	372c      	adds	r7, #44	; 0x2c
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	10320000 	.word	0x10320000
 8001a30:	10310000 	.word	0x10310000
 8001a34:	10220000 	.word	0x10220000
 8001a38:	10210000 	.word	0x10210000
 8001a3c:	10120000 	.word	0x10120000
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40011000 	.word	0x40011000
 8001a58:	40010400 	.word	0x40010400

08001a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e001      	b.n	8001a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9a:	787b      	ldrb	r3, [r7, #1]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	041a      	lsls	r2, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	611a      	str	r2, [r3, #16]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e26c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8087 	beq.w	8001c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0c:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d00c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b18:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d112      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
 8001b24:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d10b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d06c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x12c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d168      	bne.n	8001c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e246      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x76>
 8001b54:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7f      	ldr	r2, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e02e      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7a      	ldr	r2, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b78      	ldr	r3, [pc, #480]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xbc>
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a71      	ldr	r2, [pc, #452]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6e      	ldr	r2, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fc92 	bl	80014f0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fc8e 	bl	80014f0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1fa      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe4>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc7e 	bl	80014f0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fc7a 	bl	80014f0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1e6      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x10c>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1ba      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4939      	ldr	r1, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fc33 	bl	80014f0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fc2f 	bl	80014f0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e19b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4927      	ldr	r1, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc12 	bl	80014f0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc0e 	bl	80014f0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e17a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d03a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d019      	beq.n	8001d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fbf2 	bl	80014f0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fbee 	bl	80014f0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e15a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fa9a 	bl	8002268 <RCC_Delay>
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fbd8 	bl	80014f0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d42:	e00f      	b.n	8001d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fbd4 	bl	80014f0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d908      	bls.n	8001d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e140      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	42420000 	.word	0x42420000
 8001d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e9      	bne.n	8001d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a6 	beq.w	8001eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a93      	ldr	r2, [pc, #588]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b8e      	ldr	r3, [pc, #568]	; (8001fe4 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fb95 	bl	80014f0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7ff fb91 	bl	80014f0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	; 0x64
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0fd      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x312>
 8001df0:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a7a      	ldr	r2, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	e02d      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	e01c      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d10c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x356>
 8001e28:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a69      	ldr	r2, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e00b      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a66      	ldr	r2, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb45 	bl	80014f0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fb41 	bl	80014f0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0ab      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RCC_OscConfig+0x37e>
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fb2f 	bl	80014f0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff fb2b 	bl	80014f0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e095      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8081 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d061      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d146      	bne.n	8001f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_OscConfig+0x4fc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff faff 	bl	80014f0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fafb 	bl	80014f0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e067      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1e:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	492d      	ldr	r1, [pc, #180]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a19      	ldr	r1, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	430b      	orrs	r3, r1
 8001f42:	4927      	ldr	r1, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x4fc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff facf 	bl	80014f0 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff facb 	bl	80014f0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e037      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46a>
 8001f74:	e02f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_RCC_OscConfig+0x4fc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fab8 	bl	80014f0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff fab4 	bl	80014f0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e020      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x498>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e013      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42420060 	.word	0x42420060

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0d0      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d910      	bls.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4965      	ldr	r1, [pc, #404]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800206a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d040      	beq.n	800210c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e073      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06b      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4936      	ldr	r1, [pc, #216]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7ff fa08 	bl	80014f0 <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7ff fa04 	bl	80014f0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e053      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4922      	ldr	r1, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1d0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f966 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08002acc 	.word	0x08002acc
 80021b8:	20000014 	.word	0x20000014
 80021bc:	20000018 	.word	0x20000018

080021c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ee:	e027      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	e027      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0c5b      	lsrs	r3, r3, #17
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	fb02 f203 	mul.w	r2, r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e004      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	08002adc 	.word	0x08002adc
 8002260:	08002aec 	.word	0x08002aec
 8002264:	003d0900 	.word	0x003d0900

08002268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCC_Delay+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <RCC_Delay+0x38>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002284:	bf00      	nop
  }
  while (Delay --);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f9      	bne.n	8002284 <RCC_Delay+0x1c>
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	20000014 	.word	0x20000014
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e041      	b.n	800233a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff f836 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 fa56 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d001      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e035      	b.n	80023c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_TIM_Base_Start_IT+0x90>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x4e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d004      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x4e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_TIM_Base_Start_IT+0x94>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d111      	bne.n	80023b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	d010      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	e007      	b.n	80023c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40000400 	.word	0x40000400

080023dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0202 	mvn.w	r2, #2
 8002410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f998 	bl	800275c <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f98b 	bl	800274a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f99a 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0204 	mvn.w	r2, #4
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f972 	bl	800275c <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f965 	bl	800274a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f974 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f94c 	bl	800275c <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f93f 	bl	800274a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f94e 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0210 	mvn.w	r2, #16
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2208      	movs	r2, #8
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f926 	bl	800275c <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f919 	bl	800274a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f928 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fe48 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa6f 	bl	8002a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8f8 	bl	8002780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0220 	mvn.w	r2, #32
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa42 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_TIM_ConfigClockSource+0x1c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0b4      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x186>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002610:	d03e      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0xd4>
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002616:	f200 8087 	bhi.w	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 800261a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261e:	f000 8086 	beq.w	800272e <HAL_TIM_ConfigClockSource+0x172>
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d87f      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b70      	cmp	r3, #112	; 0x70
 800262a:	d01a      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0xa6>
 800262c:	2b70      	cmp	r3, #112	; 0x70
 800262e:	d87b      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b60      	cmp	r3, #96	; 0x60
 8002632:	d050      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002634:	2b60      	cmp	r3, #96	; 0x60
 8002636:	d877      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b50      	cmp	r3, #80	; 0x50
 800263a:	d03c      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0xfa>
 800263c:	2b50      	cmp	r3, #80	; 0x50
 800263e:	d873      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d058      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d86f      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b30      	cmp	r3, #48	; 0x30
 800264a:	d064      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x15a>
 800264c:	2b30      	cmp	r3, #48	; 0x30
 800264e:	d86b      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d060      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x15a>
 8002654:	2b20      	cmp	r3, #32
 8002656:	d867      	bhi.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05c      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x15a>
 800265c:	2b10      	cmp	r3, #16
 800265e:	d05a      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x15a>
 8002660:	e062      	b.n	8002728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f000 f96a 	bl	800294a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	609a      	str	r2, [r3, #8]
      break;
 800268e:	e04f      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f000 f953 	bl	800294a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b2:	609a      	str	r2, [r3, #8]
      break;
 80026b4:	e03c      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f8ca 	bl	800285c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2150      	movs	r1, #80	; 0x50
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f921 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026d4:	e02c      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f000 f8e8 	bl	80028b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2160      	movs	r1, #96	; 0x60
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f911 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026f4:	e01c      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	461a      	mov	r2, r3
 8002704:	f000 f8aa 	bl	800285c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f901 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 8002714:	e00c      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 f8f8 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 8002726:	e003      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e000      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800272e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <TIM_Base_SetConfig+0xc0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x28>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x28>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <TIM_Base_SetConfig+0xc4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <TIM_Base_SetConfig+0xc0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0x52>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0x52>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <TIM_Base_SetConfig+0xc4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <TIM_Base_SetConfig+0xc0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
  }
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400

0800285c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 0201 	bic.w	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 030a 	bic.w	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	031b      	lsls	r3, r3, #12
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	f043 0307 	orr.w	r3, r3, #7
 8002938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002964:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	021a      	lsls	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4313      	orrs	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	609a      	str	r2, [r3, #8]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800299c:	2302      	movs	r3, #2
 800299e:	e041      	b.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d004      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 f822 	bl	8002ab4 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002af0 	.word	0x08002af0
 8002a98:	08002af0 	.word	0x08002af0
 8002a9c:	08002af0 	.word	0x08002af0
 8002aa0:	08002af4 	.word	0x08002af4

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
